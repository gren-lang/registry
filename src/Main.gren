module Main exposing (main)

import Bytes exposing (Bytes)
import Db
import Db.Encode
import HttpClient
import HttpServer exposing (Request, ServerError(..), Method(..))
import HttpServer.Response as Response exposing (Response)
import Init
import Node exposing (Environment, Program)
import Registry.Db
import Route.Error
import Route.Session
import Stream
import Task exposing (Task)
import Test.E2E.Helper as Helper


main : Program Model Msg
main =
    Node.defineProgram
        { init = init
        , update = update
        , subscriptions = subscriptions
        }


config : { host : String, port_ : Int }
config =
    { host = "0.0.0.0"
    , port_ = 3000
    }


-- MODEL


type alias Model =
    { stdout : Stream.Writable Bytes
    , stderr : Stream.Writable Bytes
    , server : Maybe HttpServer.Server
    , db : Db.Connection
    }


init : Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Init.await HttpServer.initialize <| \serverPermission ->
    Init.await HttpClient.initialize <| \httpPerm ->
        let
            db =
                Helper.initDb httpPerm
        in
        Node.startProgram
            { model =
                { stdout = env.stdout
                , stderr = env.stderr
                , server = Nothing
                , db = db
                }
            , command =
                Cmd.batch
                    [ Registry.Db.migrate db 
                        |> Task.attempt DbMigrationResult
                    , HttpServer.createServer serverPermission config
                        |> Task.attempt CreateServerResult
                    ]
            }


-- UPDATE


type Msg
    = CreateServerResult (Result HttpServer.ServerError HttpServer.Server)
    | DbMigrationResult (Result Db.Error (Array Int))
    | GotRequest { request : HttpServer.Request, response : Response }
    | ResponseReady Response


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    when msg is
        CreateServerResult result ->
            when result is
                Ok server ->
                    { model = { model | server = Just server }
                    , command = 
                        "Server started: http://" ++ config.host ++ ":" ++ String.fromInt config.port_
                            |> print model.stdout
                            |> Task.execute
                    }

                Err (ServerError { code, message }) ->
                    { model = model
                    , command =
                        "Server failed to start: " ++ code ++ "\n" ++ message
                            |> print model.stderr
                            |> Task.execute
                    }

        DbMigrationResult result ->
            when result is
                Ok numChanges ->
                    { model = model
                    , command = Cmd.none
                    }

                Err error ->
                    { model = model
                    , command =
                        -- TODO: real error message
                        "Db failed to migrate: " ++ Debug.toString error
                            |> print model.stderr
                            |> Task.andThen (\_ -> Node.exitWithCode 1)
                            |> Task.execute
                    }
                            
        GotRequest { request, response } ->
            { model = model
            , command =
                route model request response
                    |> Task.perform ResponseReady
            }

        ResponseReady response ->
            { model = model
            , command =
                Response.send response
            }


route : Model -> Request -> Response -> Task Never Response
route model request response =
    let
        path =
            request.url.path
                |> String.split "/"
                |> Array.keepIf (\s -> s /= "")
    in
    when { method = request.method, path = path } is
        { method = POST, path = [ "session" ] } ->
            Route.Session.create model.db response request.body

        _ ->
            Route.Error.notFound response


print : Stream.Writable Bytes -> String -> Task Never {}
print stream string =
    Stream.writeLineAsBytes string stream
        |> Task.map (\_ -> {})
        |> Task.onError (\_ -> Task.succeed {})


-- SUBSCRIPTION


subscriptions : Model -> Sub Msg
subscriptions model =
    when model.server is
        Just server ->
            HttpServer.onRequest server <| \req res -> 
                GotRequest { request = req, response = res }

        Nothing ->
            Sub.none

