module Test.E2E.Route.Session exposing (tests)


import Bytes
import Db
import Db.Encode
import Db.Decode
import Email
import Expect
import HttpClient
import Json.Decode
import Json.Encode
import Task exposing (Task)
import Test.Runner.Effectful exposing (Test, await, awaitError, concat, describe, test)
import Test.E2E.Helper exposing (initDb, get, post, postWithJson, expectBadStatus, expectJson)
import User exposing (User)


tests : HttpClient.Permission -> Array Test
tests httpPerm =
    let
        db : Db.Connection
        db =
            initDb httpPerm

        getUser : String -> Task Db.Error User
        getUser email =
            Db.getOne db
                { query = "select * from user where email = :email"
                , parameters = [ Db.Encode.string "email" email ]
                , decoder = User.decoder
                }
    in
    [ awaitError "GET /session" (get httpPerm "/session") <| \response ->
        test "404s" <| \_ ->
            expectBadStatus 404 response

    , describe "Create session" <|
        let
            goodEmail =
                "abc@example.com"

            withNoEmail =
                post httpPerm "/session"

            withEmail email =
                postWithJson httpPerm "/session" <|
                    Json.Encode.object
                        [ { key = "email"
                          , value = Json.Encode.string email
                          }
                        ]
        in
        [ awaitError "POST /session with no email" withNoEmail <| \response ->
            test "Responds with 400 error" <| \_ ->
                expectBadStatus 400 response

        , awaitError "POST /session with bad email" (withEmail "asdf") <| \response ->
            test "Responds with 400 error" <| \_ ->
                expectBadStatus 400 response

        , await "POST /session with good email" (withEmail goodEmail) <| \response ->
            concat
                [ test "Responds successfully" <| \_ ->
                    Expect.equal 200 response.statusCode

                , await "Getting session info from db" 
                    (Db.getOne db
                        { query = 
                            """
                            select fetch_session_token from session
                            inner join user on (user.id = session.user_id)
                            where user.email = :email
                            order by session.created desc
                            limit 1
                            """
                        , parameters =
                            [ Db.Encode.string "email" goodEmail ]
                        , decoder =
                            Db.Decode.string "fetch_session_token"
                        }
                    )
                    (\expectedToken ->
                        test "responds with fetch session token" <| \_ ->
                            response.data
                                |> expectJson
                                    (Json.Decode.field "fetchSessionToken" Json.Decode.string)
                                    expectedToken
                    )
                ]
        ]
    ]
