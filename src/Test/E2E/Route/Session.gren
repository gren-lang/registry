module Test.E2E.Route.Session exposing (tests)


import Db
import Db.Encode
import Db.Decode
import Email
import Expect
import HttpClient
import Json.Encode
import Task exposing (Task)
import Test.Runner.Effectful exposing (Test, await, awaitError, concat, describe, test)
import Test.E2E.Helper exposing (initDb, get, post, postWithJson, expectBadStatus)
import User exposing (User)


tests : HttpClient.Permission -> Array Test
tests httpPerm =
    let
        db : Db.Connection
        db =
            initDb httpPerm

        getUser : String -> Task Db.Error User
        getUser email =
            Db.getOne db
                { query = "select * from user where email = :email"
                , parameters = [ Db.Encode.string "email" email ]
                , decoder = User.decoder
                }
    in
    [ awaitError (get httpPerm "/session") "GET /session" <| \response ->
        test "404s" <| \_ ->
            expectBadStatus 404 response

    , describe "Create session" <|
        let
            goodEmail =
                "abc@example.com"

            withNoEmail =
                post httpPerm "/session"

            withEmail email =
                postWithJson httpPerm "/session" <|
                    Json.Encode.object
                        [ { key = "email"
                          , value = Json.Encode.string email
                          }
                        ]
        in
        [ awaitError withNoEmail "POST /session with no email" <| \response ->
            test "Responds with 400 error" <| \_ ->
                expectBadStatus 400 response

        , awaitError (withEmail "asdf") "POST /session with bad email" <| \response ->
            test "Responds with 400 error" <| \_ ->
                expectBadStatus 400 response

        , await (withEmail goodEmail) "POST /session with good email" <| \response ->
            concat
                [ test "Responds successfully" <| \_ ->
                    Expect.equal 200 response.statusCode

                , await (getUser goodEmail) "Getting created user from db" <| \user ->
                    test "returns the created user" <| \_ ->
                        Email.toString user.email
                            |> Expect.equal goodEmail
                ]
        ]
    ]
