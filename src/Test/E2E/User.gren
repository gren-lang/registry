module Test.E2E.User exposing (tests)


import Db
import Db.Encode
import Db.Decode
import Email
import Expect
import HttpClient
import Task exposing (Task)
import Test.Runner.Effectful exposing (Test, await, concat, describe, test)
import Test.E2E.Helper exposing (initDb)
import User exposing (User)


tests : HttpClient.Permission -> Array Test
tests httpPerm =
    let
        db : Db.Connection
        db =
            initDb httpPerm

        dropUsers : Task Db.Error Int
        dropUsers =
            Db.execute db
                { statement = "delete from user"
                , parameters = []
                }

        countUsers : Task Db.Error Int
        countUsers =
            Db.getOne db
                { query = "select count(*) as userCount from user where email = :email"
                , parameters = [ Db.Encode.string "email" (Email.toString Email.example) ]
                , decoder = Db.Decode.int "userCount"
                }

        findOrCreateUser : Task Db.Error User
        findOrCreateUser =
            User.findOrCreate db Email.example
    in
    [ describe "User.findOrCreate"
        [ await "drop users" dropUsers <| \_ ->
          await "get user count: first call" countUsers <| \count1 ->
          await "find or create user: first call" findOrCreateUser <| \user1 ->
          await "find or create user: second call" findOrCreateUser <| \user2 ->
          await "get user count: second call" countUsers <| \count2 ->
            concat
                [ test "always returns the same user" <| \_ ->
                    Expect.equal user1.email user2.email

                , test "creates user only if not exists" <| \_ ->
                    Expect.equalArrays
                        [ count1, count2 ]
                        [ 0, 1 ]
                ]
        ]
    ]
