module Route.User exposing
    ( create
    )


import Bytes exposing (Bytes)
import Db
import Email exposing (Email)
import HttpServer.Response as Response exposing (Response)
import Json.Decode
import Task exposing (Task)


type Error
    = InvalidEmail
    | DbError Db.Error


create : Response -> Bytes -> Task Never Response
create response body =
    when getEmail body is
        Nothing ->
            failed response InvalidEmail
        
        Just email ->
            success response
            -- TODO: create user (first need routes to return Task, not Cmd)
            --createUserIfNotExists email
            --    |> Task.onError (\e -> failed response (DbError Db.Error)
            --    |> Task.andThen (\_ -> success response)


success : Response -> Task Never Response
success response =
    Task.succeed response


failed : Response -> Error -> Task Never Response
failed response error =
    when error is
        InvalidEmail ->
            response
                |> Response.setStatus 400
                -- TODO: helpful error message in json body
                |> Task.succeed

        DbError e ->
            response
                |> Response.setStatus 500
                -- TODO: helpful error message in json body
                |> Task.succeed


getEmail : Bytes -> Maybe Email
getEmail bytes =
    bytes
        |> Bytes.toString
        |> Maybe.andThen decodeEmail
        |> Maybe.andThen Email.fromString


decodeEmail : String -> Maybe String
decodeEmail json =
    json
        |> Json.Decode.decodeString emailDecoder
        |> Result.toMaybe


emailDecoder : Json.Decode.Decoder String
emailDecoder =
    Json.Decode.field "email" Json.Decode.string
