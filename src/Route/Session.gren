module Route.Session exposing
    ( create
    )


import Bytes exposing (Bytes)
import Db
import Email exposing (Email)
import HttpServer.Response as Response exposing (Response)
import Json.Decode
import Json.Encode
import Session exposing (Session)
import Task exposing (Task)
import User exposing (User)


type Error
    = InvalidEmail
    | NoSecureContext
    | DbError Db.Error


create : Db.Connection -> Response -> Bytes -> Task Never Response
create db response requestBody =
    findOrCreateUser db requestBody
        |> Task.andThen (createSession db)
        |> Task.map (createSuccess response)
        |> Task.onError (createFailed response)


findOrCreateUser : Db.Connection -> Bytes -> Task Error User
findOrCreateUser db requestBody =
    when getEmail requestBody is
        Nothing ->
            Task.fail InvalidEmail

        Just email ->
            User.findOrCreate db email
                |> Task.mapError DbError


createSession : Db.Connection -> User -> Task Error Session
createSession db user =
    Session.create db user
        |> Task.mapError 
            (\error ->
                when error is
                    Session.DbError dbError -> DbError dbError
                    Session.NoSecureContext -> NoSecureContext
            )


createSuccess : Response -> Session -> Response
createSuccess response session =
    let
        responseJson =
            Json.Encode.object
                [ { key = "fetchSessionToken"
                  , value = Json.Encode.string session.fetchSessionToken
                  }
                ]
    in
    response
        |> Response.setHeader "Content-Type" "application/json"
        |> Response.setBody (Json.Encode.encode 0 responseJson)


createFailed : Response -> Error -> Task x Response
createFailed response error =
    when error is
        InvalidEmail ->
            response
                |> Response.setStatus 400
                -- TODO: helpful error message in json body
                |> Task.succeed

        DbError e ->
            response
                |> Response.setStatus 500
                -- TODO: helpful error message in json body
                |> Task.succeed

        NoSecureContext ->
            response
                |> Response.setStatus 500
                -- TODO: helpful error message in json body
                |> Task.succeed


getEmail : Bytes -> Maybe Email
getEmail bytes =
    bytes
        |> Bytes.toString
        |> Maybe.andThen decodeEmail
        |> Maybe.andThen Email.fromString


decodeEmail : String -> Maybe String
decodeEmail json =
    json
        |> Json.Decode.decodeString emailDecoder
        |> Result.toMaybe


emailDecoder : Json.Decode.Decoder String
emailDecoder =
    Json.Decode.field "email" Json.Decode.string
